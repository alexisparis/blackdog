/* 
 * TransSiberia-ui : siberia plugin frontend for TransSiberia
 *
 * Copyright (C) 2008 Alexis PARIS
 * Project Lead:  Alexis Paris
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library;
 * if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.
 */
package org.siberia.trans.ui.editor.impl.plugin;

import java.util.ResourceBundle;
import javax.swing.JLabel;
import javax.swing.JProgressBar;

/**
 *
 * @author  alexis
 */
public class PluginDownloadPanel extends javax.swing.JPanel
{
    /** build count to download */
    private int buildCount      = 0;
    
    /** build count downloaded */
    private int buildDownloaded = 0;
    
    /** Creates new form PluginDownloadPanel */
    public PluginDownloadPanel()
    {
	initComponents();
	
	this.labelInformation.setText("");
	
	ResourceBundle rb = ResourceBundle.getBundle(PluginDownloadPanel.class.getName());
	this.mainLabel.setText(rb.getString("mainLabel"));
    }
    
    /** reinitialize the content of the panel
     *	all progress bar are set to zero
     *	information label is razed
     */
    public void reinit()
    {
	this.getInformationLabel().setIcon(null);
	this.getInformationLabel().setText("");
	
	this.getBuildInfoLabel().setText("");
	
	this.getCurrentTaskProgressBar().setValue(0);
	this.getGeneralProgressBar().setValue(0);
    }
    
    /** set the number of build to download
     *	@param count
     */
    public void setBuildToDownloadCount(int count)
    {
	this.buildCount = count;
	this.updateBuildDownloadedCount();
    }
    
    /** return the information label
     *	@return a Label
     */
    public JLabel getInformationLabel()
    {	return this.labelInformation; }
    
    /** set the number of build downloaded
     *	@param count
     */
    public void setBuildDownloadedCount(int count)
    {
	this.buildDownloaded = count;
	this.updateBuildDownloadedCount();
    }
    
    /** increment the number of build downloaded */
    public void incrementBuildDownloadedCount()
    {
	this.setBuildDownloadedCount(this.buildDownloaded + 1);
    }
    
    /** update the label displaying the number of build downloaded */
    private void updateBuildDownloadedCount()
    {
	this.buildDownloadedCountLabel.setText("[" + this.buildDownloaded + "/" + this.buildCount + "]");
    }
    
    /** return the global JProgressBar
     *	@return a JProgressBar
     */
    public JProgressBar getGeneralProgressBar()
    {
	return this.generalProgressBar;
    }
    
    /** return the 'current task' JProgressBar
     *	@return a JProgressBar
     */
    public JProgressBar getCurrentTaskProgressBar()
    {
	return this.currentTaskProgressBar;
    }
    
    /** return the JLabel that is used to display the information of the current build 
     *	@return a JLabel
     */
    public JLabel getBuildInfoLabel()
    {
	return this.currentBuildLabel;
    }
    
    /** return the stop button
     *	@return a JButton
     */
    public javax.swing.JButton getStopButton()
    {
	return this.stopButton;
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents()
    {
        mainLabel = new javax.swing.JLabel();
        currentBuildLabel = new javax.swing.JLabel();
        buildDownloadedCountLabel = new javax.swing.JLabel();
        currentTaskProgressBar = new javax.swing.JProgressBar();
        generalProgressBar = new javax.swing.JProgressBar();
        stopButton = new javax.swing.JButton();
        labelInformation = new javax.swing.JLabel();

        mainLabel.setText("Plugins installation");

        currentBuildLabel.setText("Siberia-types (0.0.2)");

        buildDownloadedCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        buildDownloadedCountLabel.setText("[1/7]");

        stopButton.setText("Stop");

        labelInformation.setText("jLabel1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(currentBuildLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buildDownloadedCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
            .addComponent(mainLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
            .addComponent(currentTaskProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
            .addComponent(generalProgressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 404, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(labelInformation, javax.swing.GroupLayout.DEFAULT_SIZE, 330, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(stopButton))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(mainLabel)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(currentBuildLabel)
                    .addComponent(buildDownloadedCountLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(currentTaskProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addComponent(generalProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(stopButton)
                    .addComponent(labelInformation))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel buildDownloadedCountLabel;
    private javax.swing.JLabel currentBuildLabel;
    private javax.swing.JProgressBar currentTaskProgressBar;
    private javax.swing.JProgressBar generalProgressBar;
    private javax.swing.JLabel labelInformation;
    private javax.swing.JLabel mainLabel;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
    
}
